using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;

namespace miniKIFIR
{
    public partial class NewStudentWindow : Window
    {
        private bool isNewStudentMode;

        public NewStudentWindow(bool isNewStudent = true)
        {
            InitializeComponent();
            isNewStudentMode = isNewStudent;
            if (!isNewStudentMode)
            {
                txtOmAzonosito.IsReadOnly = true;
                lblDiak.Content = "Diák módosítása";
                btnRogzit.Content = "Módosítás";
            }
        }

        public bool StudentCreated { get; private set; } = false;

        public bool ChangesSaved { get; private set; } = false;

        private Students selectedStudent;

        public void SetSelectedStudent(Students student)
        {
            txtOmAzonosito.Text = student.OM_Azonosito;
            txtNev.Text = student.Neve;
            txtEmail.Text = student.Email;
            txtErtesitesiLakcim.Text = student.ErtesitesiCime;
            txtMatekPont.Text = student.Matematika.ToString();
            txtMagyarPont.Text = student.Magyar.ToString();
            selectedStudent = student;
        }

        private void btnRogzit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ValidateOMAzonosito() && ValidateName() && ValidateEmail() && ValidateDateOfBirth() && ValidatePoints())
                {
                    MainWindow mainWindow = Application.Current.Windows.OfType<MainWindow>().FirstOrDefault();
                    if (mainWindow != null)
                    {
                        if (isNewStudentMode)
                        {
                            Students student = new Students(
                                txtOmAzonosito.Text,
                                txtNev.Text,
                                txtEmail.Text,
                                DateTime.Parse(DtSzulIdo.Text),
                                txtErtesitesiLakcim.Text,
                                int.Parse(txtMatekPont.Text),
                                int.Parse(txtMagyarPont.Text)
                            );

                            mainWindow.studentsList.Add(student);
                        }
                        else
                        {
                            selectedStudent.OM_Azonosito = txtOmAzonosito.Text;
                            selectedStudent.Neve = txtNev.Text;
                            selectedStudent.Email = txtEmail.Text;
                            selectedStudent.SzuletesiDatum = DateTime.Parse(DtSzulIdo.Text);
                            selectedStudent.ErtesitesiCime = txtErtesitesiLakcim.Text;

                            ChangesSaved = true;
                        }
                        if (mainWindow.dgFelvetelizok.ItemsSource != null)
                        {
                            var addResult = MessageBox.Show("A már betöltött adatok mögé szeretné fűzni?", "Importálás", MessageBoxButton.YesNo, MessageBoxImage.Question);
                            if (addResult == MessageBoxResult.Yes)
                            {
                                ObservableCollection<Students> existingList = (ObservableCollection<Students>)mainWindow.dgFelvetelizok.ItemsSource;
                                foreach (var student2 in mainWindow.studentsList)
                                {
                                    existingList.Add(student2);
                                }
                                mainWindow.studentsList.Clear();
                            }
                        }
                        else
                        {
                            mainWindow.dgFelvetelizok.ItemsSource = mainWindow.studentsList;
                        }

                        StudentCreated = true;
                        Close();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Hiba: {ex.Message}", "Hiba", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private bool ValidateOMAzonosito()
        {
            if (txtOmAzonosito.Text.Length == 11 && txtOmAzonosito.Text.All(char.IsDigit))
            {
                return true;
            }
            MessageBox.Show("Hibás OM azonosító! A számsornak 11 karakter hosszúnak kell lennie és csak számokat tartalmazhat!");
            txtOmAzonosito.Focus();
            txtOmAzonosito.Clear();
            return false;
        }

        private bool ValidateName()
        {
            string[] nameParts = txtNev.Text.Split(' ');
            if (nameParts.Length >= 2 && nameParts.All(part => !string.IsNullOrWhiteSpace(part) && char.IsUpper(part[0])))
            {
                return true;
            }
            MessageBox.Show("A név mező hibásan lett megadva!");
            txtNev.Focus();
            txtNev.Clear();
            return false;
        }

        private bool ValidateEmail()
        {
            if (txtEmail.Text.Count(c => c == '@') == 1 && !txtEmail.Text.Contains(" ") && txtEmail.Text.Split('@').All(part => !string.IsNullOrWhiteSpace(part)))
            {
                return true;
            }
            MessageBox.Show("Hibás email cím!");
            txtEmail.Focus();
            txtEmail.Clear();
            return false;
        }

        private bool ValidateDateOfBirth()
        {
            DateTime szuletesiDatum;
            if (DateTime.TryParse(DtSzulIdo.Text, out szuletesiDatum))
            {
                return true;
            }
            MessageBox.Show("Hibás dátum formátum!");
            return false;
        }

        private bool ValidatePoints()
        {
            int matekPont, magyarPont;
            if (int.TryParse(txtMatekPont.Text, out matekPont) && int.TryParse(txtMagyarPont.Text, out magyarPont))
            {
                if (matekPont >= 0 && matekPont <= 50 && magyarPont >= 0 && magyarPont <= 50)
                {
                    return true;
                }
                MessageBox.Show("A magyar és matematika pontoknak 0 és 50 között kell lennie!");
                txtMatekPont.Focus();
            }
            else
            {
                MessageBox.Show("A pontoknak számoknak kell lenniük!");
                txtMatekPont.Focus();
                txtMatekPont.Clear();
            }
            return false;
        }

        private void windowCloseBtn_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void TextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                e.Handled = true;
                TraversalRequest request = new TraversalRequest(FocusNavigationDirection.Next);
                UIElement elementWithFocus = Keyboard.FocusedElement as UIElement;

                if (elementWithFocus != null)
                {
                    elementWithFocus.MoveFocus(request);
                }
            }
        }
    }
}